version: "3.8"

x-zoo: &zoo "kafka-1:2888:3888;kafka-2:2888:3888;kafka-3:2888:3888"
x-kafkaZookeepers: &kafkaZookeepers "kafka-1:2181,kafka-2:2181,kafka-3:2181"
x-kafkaBrokers: &kafkaBrokers "kafka-1:9092"

services:
    # Brokers
    # zookeeper:
    #     image: confluentinc/cp-zookeeper:7.2.6
    #     restart: always
    #     networks:
    #         - brokers_network
    #     environment:
    #         ZOOKEEPER_CLIENT_PORT: 2181
    #         ZOOKEEPER_TICK_TIME: 2000
    #     ports:
    #         - 2181:2181
    #     volumes:
    #         - ./kafka-data/zookeeper:/var/lib/zookeeper/data
    #         - ./kafka-data/zookeeper-logs:/var/lib/zookeeper/log
    # kafka:
    #     image: confluentinc/cp-kafka:7.2.6
    #     networks:
    #         - brokers_network
    #     depends_on:
    #         - zookeeper
    #     ports:
    #         - 9092:9092
    #         - 29092:29092
    #     environment:
    #         KAFKA_BROKER_ID: 1
    #         KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #         KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    #         KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #     volumes:
    #         - ./kafka-data/kafka:/var/lib/kafka/data
    
    # kafdrop:
    #     image: obsidiandynamics/kafdrop
    #     restart: always
    #     ports:
    #         - "9000:9000"
    #     environment:
    #         KAFKA_BROKERCONNECT: "kafka:9092"
    #     networks:
    #         - brokers_network


    # microservices
    # microservice_users:
    #     restart: always
    #     build:
    #         dockerfile: ./microservice_users/Dockerfile
    #     ports:
    #         - "8001:8001"
    #     command: python manage.py runserver 0.0.0.0:8001
    #     # command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    #     depends_on:
    #         - postgres
    #     networks:
    #         - brokers_network
    #         - database_network
    #     environment:
    #         KAFKA_BROKERCONNECT: "kafka:9092"
    #         POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
    #         POSTGRES_USER: ${POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #         POSTGRES_HOST: postgres
    #         POSTGRES_PORT: ${POSTGRES_PORT}
    #         DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    #     volumes:
    #         - ./microservice_users/:/app
    
    # microservice_orders:
    #     restart: always
    #     build:
    #         dockerfile: ./microservice_orders/Dockerfile
    #     ports:
    #         - "8002:8002"
    #     command: python manage.py runserver 0.0.0.0:8002
    #     # command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    #     depends_on:
    #         - postgres
    #     networks:
    #         - brokers_network
    #         - database_network
    #     environment:
    #         KAFKA_BROKERCONNECT: "kafka:9092"
    #         POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
    #         POSTGRES_USER: ${POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #         POSTGRES_HOST: postgres
    #         POSTGRES_PORT: ${POSTGRES_PORT}
    #         DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    #     volumes:
    #         - ./microservice_orders/:/app
    
    microservice_inventory:
        restart: always
        build:
            dockerfile: ./microservice_inventory/Dockerfile
        ports:
            - "8003:8003"
        depends_on:
            - postgres
        networks:
            - brokers_network
            - database_network
        environment:
            KAFKA_BROKERCONNECT: "kafka:9092"
            POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_HOST: postgres
            POSTGRES_PORT: ${POSTGRES_PORT}
            DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
        volumes:
            - ./microservice_inventory/:/app

    # Database administrator
    pgadmin:
        image: dpage/pgadmin4
        container_name: postgres_main
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
            # PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE}  # Keep commented out
        ports:
            - "5050:${PGADMIN_LISTEN_PORT}"
        volumes:
            - ./database_pgadmin:/var/lib/pgadmin4/data
        networks:
            - database_network
        restart: unless-stopped
    
    # Database
    postgres:
        image: postgres:12-alpine3.19
        environment:
            POSTGRES_DB: ${POSTGRES_DATABASE_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - ./postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - database_network
    
    # Proxies
    nginx:
        restart: always
        image: nginx
        build:
            dockerfile: ./nginx/Dockerfile
        ports:
            - "81:81"
        depends_on:
            - microservice_inventory
        volumes:
            - ./default.conf:/etc/nginx/conf.d/default.conf:ro
            - ./microservice_inventory/static:/etc/nginx/static/microservice_inventory
        networks:
            - brokers_network
            - database_network


networks:
    database_network:
        driver: bridge
    brokers_network:
        driver: bridge

volumes:
    zookeeper: {}
    kafka1: {}
    pgadmin: {}
