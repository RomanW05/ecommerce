version: "3.8"

x-zoo: &zoo "kafka-1:2888:3888;kafka-2:2888:3888;kafka-3:2888:3888"
x-kafkaZookeepers: &kafkaZookeepers "kafka-1:2181,kafka-2:2181,kafka-3:2181"
x-kafkaBrokers: &kafkaBrokers "kafka-1:9092"

services:
    # Brokers
    zookeeper:
        image: confluentinc/cp-zookeeper:7.2.6
        restart: always
        networks:
            - brokers_network
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - 2181:2181
        volumes:
            - ./kafka-data/zookeeper:/var/lib/zookeeper/data
            - ./kafka-data/zookeeper-logs:/var/lib/zookeeper/log
    kafka:
        image: confluentinc/cp-kafka:7.2.6
        networks:
            - brokers_network
        depends_on:
            - zookeeper
        ports:
            - 9092:9092
            - 29092:29092
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - ./kafka-data/kafka:/var/lib/kafka/data
    
    kafdrop:
        image: obsidiandynamics/kafdrop
        restart: always
        ports:
            - "9000:9000"
        environment:
            KAFKA_BROKERCONNECT: "kafka:9092"
        networks:
            - brokers_network


    # microservices
    microservice_api:
        restart: always
        build:
            dockerfile: ./microservice_api/Dockerfile
        ports:
            - "8000:8000"
        command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]

        volumes:
            - ./microservice_api:/api
        networks:
            - brokers_network
        environment:
            KAFKA_BROKERCONNECT: "kafka:9092"

    









    # microservice_analytics:
    #     restart: on-failure:10
    #     build:
    #         dockerfile: ./ecommerce/microservice_analytics/Dockerfile
    #         args:
    #             POSTGRES_USER: ${DATABASE_ANALYTICS_POSTGRES_USER}
    #             POSTGRES_PASSWORD: ${DATABASE_ANALYTICS_POSTGRES_PASSWORD}
    #             POSTGRES_DB: ${DATABASE_ANALYTICS_POSTGRES_DATABASE_NAME}
    #             POSTGRES_HOST: ${DATABASE_ANALYTICS_POSTGRES_HOST}
    #     ports:
    #         - "8001:8001"
    #     env_file:
    #         - .env
    #     environment:
    #         POSTGRES_USER: ${DATABASE_ANALYTICS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_ANALYTICS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_ANALYTICS_POSTGRES_DATABASE_NAME}
    #         POSTGRES_HOST: database_analytics
    #         POSTGRES_PORT: ${POSTGRES_PORT}
    #         KAFKA_BROKERCONNECT: "kafka:9092"
    #     networks:
    #         - brokers_network
    #         - database_analytics_network
    #     depends_on:
    #         database_analytics:
    #             condition: service_healthy

    microservice_inventory:
        restart: always
        build:
            dockerfile: ./microservice_inventory/Dockerfile
            args:
                POSTGRES_USER: ${DATABASE_INVENTORY_POSTGRES_USER}
                POSTGRES_PASSWORD: ${DATABASE_INVENTORY_POSTGRES_PASSWORD}
                POSTGRES_DB: ${DATABASE_INVENTORY_POSTGRES_DATABASE_NAME}
                POSTGRES_HOST: ${DATABASE_INVENTORY_POSTGRES_HOST}
        ports:
            - "8001:8001"
        env_file:
            - .env
        environment:
            POSTGRES_USER: ${DATABASE_INVENTORY_POSTGRES_USER}
            POSTGRES_PASSWORD: ${DATABASE_INVENTORY_POSTGRES_PASSWORD}
            POSTGRES_DB: ${DATABASE_INVENTORY_POSTGRES_DATABASE_NAME}
            POSTGRES_HOST: database_inventory
            POSTGRES_PORT: ${POSTGRES_PORT}
            KAFKA_BROKERCONNECT: "kafka:9092"
        networks:
            - brokers_network
            - database_network
        depends_on:
            - zookeeper
            - kafka















        # command: ["./ecommerce/backend_analytics/wait_for_it.sh", "database_analytics:5432", "--", "python", "create_db.py"]

    # Postgres Databases
    # database_analytics:
    #     build:
    #         dockerfile: ./ecommerce/database_analytics/Dockerfile
    #     restart: always
    #     ports:
    #         - '5432:${POSTGRES_PORT}'
    #     networks:
    #         - database_analytics_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_analytics:/var/lib/database_analytics/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_ANALYTICS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_ANALYTICS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_ANALYTICS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
    #         interval: 10s
    #         timeout: 3s
    #         retries: 3

    # database_users:
    #     build:
    #         dockerfile: ./ecommerce/database_users/Dockerfile
    #     restart: always
    #     ports:
    #         - '5433:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_users:/var/lib/database_users/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_USERS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_USERS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_USERS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10
    # database_inventory:
    #     image: postgres
    #     restart: always
    #     env_file:
    #         - .env
    #     networks:
    #         - database_network
    #     environment:
    #         POSTGRES_USER: ${DATABASE_INVENTORY_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_INVENTORY_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_INVENTORY_POSTGRES_DATABASE_NAME}
    #     volumes:
    #         - ./data/database_inventory:/var/lib/database_inventory/data
    #     healthcheck:
    #         test: curl --fail http://localhost || exit 1
    #         interval: 60s
    #         retries: 5
    #         start_period: 20s
    #         timeout: 10s

    # database_inventory:
    #     build:
    #         dockerfile: ./database_inventory/Dockerfile
    #     restart: always
    #     ports:
    #         - '5434:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./database_inventory:/var/lib/database_inventory/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_INVENTORY_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_INVENTORY_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_INVENTORY_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10
    
    # database_marketing:
    #     build:
    #         dockerfile: ./ecommerce/database_marketing/Dockerfile
    #     restart: always
    #     ports:
    #         - '5435:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_marketing:/var/lib/database_marketing/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_MARKETING_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_MARKETING_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_MARKETING_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10

    # database_orders:
    #     build:
    #         dockerfile: ./ecommerce/database_orders/Dockerfile
    #     restart: always
    #     ports:
    #         - '5436:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_orders:/var/lib/database_orders/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_ORDERS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_ORDERS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_ORDERS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10

    # database_analytics:
    #     build:
    #         dockerfile: ./ecommerce/database_analytics/Dockerfile
    #     restart: always
    #     ports:
    #         - '5436:${POSTGRES_ANALYTICS_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_analytics:/var/lib/database_analytics/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_ANALYTICS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_ANALYTICS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_ANALYTICS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10


    # # Database administrator
    pgadmin:
        image: dpage/pgadmin4
        container_name: postgres_main
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
            # PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE}
        ports:
            - "5050:${PGADMIN_LISTEN_PORT}"
        volumes:
            - ./data/pgadmin4:/var/lib/pgadmin4/data
        networks:
            - database_network
        restart: unless-stopped

    
networks:
    database_network:
        driver: bridge
    brokers_network:
        driver: bridge

volumes:
    zookeeper: {}
    kafka1: {}
    database_analytics: {}
    database_marketing: {}
    database_orders: {}
    database_inventory: {}
    database_users: {}
    pgadmin: {}
