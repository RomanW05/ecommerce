version: "3.8"
services:
    zookeeper:
        image: zookeeper:3.4.9
        hostname: zookeeper
        ports:
        - "2181:2181"
        environment:
            ZOO_MY_ID: 1
            ZOO_PORT: 2181
            ZOO_SERVERS: server.1=zookeeper:2888:3888
        volumes:
            - ./data/zookeeper/data:/data
            - ./data/zookeeper/datalog:/datalog
        # healthcheck:
        #     test: ["CMD-SHELL", "echo ruok | nc -w 2 zookeeper 4444"]
        #     interval: 5s
        #     timeout: 10s
        #     retries: 3

    

    kafka1:
        image: confluentinc/cp-kafka:5.3.0
        hostname: kafka1
        ports:
            - "9091:9091"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - ./data/kafka1/data:/var/lib/kafka/data
        depends_on:
            - zookeeper
        #    zookeeper:
        #        condition: service_healthy
        # healthcheck:
        #     test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic <TOPIC_NAME> --describe"]
        #     interval: 2s
        #     timeout: 2s
        #     retries: 15
        healthcheck:
            test: nc -z localhost 9091 || exit -1
            start_period: 15s
            interval: 5s
            timeout: 10s
            retries: 10
    


    












    backend_analytics:
        stdin_open: true # docker run -i
        tty: true        # docker run -t
        restart: always
        build:
            dockerfile: ./ecommerce/backend_analytics/Dockerfile
        ports:
            - "8001:8001"
        depends_on:
            kafka1:
                condition: service_healthy
        
        volumes:
            - /usr/src/app/static
            - .:/code
    
    backend_api:
        restart: always
        build:
            dockerfile: ./ecommerce/backend_api/Dockerfile
        ports:
            - "8000:8000"
        stdin_open: true # docker run -i
        tty: true        # docker run -t
        command: "python3 manage.py runserver 0.0.0.0:8000"
        depends_on:
            kafka1:
                condition: service_healthy
            # zookeeper:
            #     condition: service_healthy
        # depends_on:
        #     kafka1:
        #         condition: service_healthy
        volumes:
            # - /usr/src/app/static
            - ./ecommerce/backend_api:/api
    
    db:
        image: postgres
        restart: always
        environment:
            POSTGRES_PASSWORD: example
        healthcheck:
            test: [“CMD-SHELL”, “pg_isready”]
            interval: 1s
            timeout: 5s
            retries: 10
 

    




    # personal_website:
    #     build:
    #         dockerfile: ./personal_website/Dockerfile