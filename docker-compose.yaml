version: "3.8"
services:


    # Brokers
    # zookeeper:
    #     image: zookeeper:3.4.9
    #     hostname: zookeeper
    #     ports:
    #     - "2181:2181"
    #     environment:
    #         ZOO_MY_ID: 1
    #         ZOO_PORT: 2181
    #         ZOO_SERVERS: server.1=zookeeper:2888:3888
    #     volumes:
    #         - ./data/zookeeper/data:/data
    #         - ./data/zookeeper/datalog:/datalog
    #     healthcheck:
    #         test: ["CMD-SHELL", "echo ruok | nc -w 2 zookeeper 4444"]
    #         interval: 5s
    #         timeout: 10s
    #         retries: 3
    #     networks: 
    #         - database_network
    zookeeper:
        image: zookeeper:3.4.9
        hostname: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOO_MY_ID: 1
            ZOO_PORT: 2181
            ZOO_SERVERS: server.1=zookeeper:2888:3888
        healthcheck:
            test: ["CMD-SHELL", "echo ruok | nc -z zookeeper 2181"]
            interval: 5s
            timeout: 10s
            retries: 3
        volumes:
            - ./data/zookeeper/data:/data
            - ./data/zookeeper/datalog:/datalog

    kafka1:
        image: confluentinc/cp-kafka:5.3.0
        hostname: kafka1
        ports:
            - "9091:9091"
        environment:
            KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_BROKER_ID: 1
        volumes:
            - ./data/kafka1/data:/var/lib/kafka/data
        depends_on:
            zookeeper:
                condition: service_healthy
    
    kafdrop:
        image: obsidiandynamics/kafdrop
        restart: "no"
        ports:
            - "9000:9000"
        environment:
            KAFKA_BROKERCONNECT: "kafka1:19091"
        depends_on:
            - kafka1


    # backends
    backend_analytics:
        restart: always
        build:
            dockerfile: ./ecommerce/backend_analytics/Dockerfile
        ports:
            - "8001:8001"
        env_file:
            - .env
        environment:
            POSTGRES_USER: ${DATABASE_ANALYTICS_POSTGRES_USER}
            POSTGRES_PASSWORD: ${DATABASE_ANALYTICS_POSTGRES_PASSWORD}
            POSTGRES_DB: ${DATABASE_ANALYTICS_POSTGRES_DATABASE_NAME}
            POSTGRES_HOST: database_analytics
            POSTGRES_PORT: ${POSTGRES_PORT}
        networks:
            - database_network

    backend_api:
        restart: always
        build:
            dockerfile: ./ecommerce/backend_api/Dockerfile
        ports:
            - "8000:8000"
        command: "python3 manage.py runserver 0.0.0.0:8000"
        volumes:
            - ./ecommerce/backend_api:/api


    # Databases
    # database_analytics:
    #     build:
    #         dockerfile: ./ecommerce/database_analytics/Dockerfile
    #     restart: always
    #     ports:
    #         - '5432:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_analytics:/var/lib/database_analytics/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_ANALYTICS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_ANALYTICS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_ANALYTICS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10
    
    # database_users:
    #     build:
    #         dockerfile: ./ecommerce/database_users/Dockerfile
    #     restart: always
    #     ports:
    #         - '5433:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_users:/var/lib/database_users/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_USERS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_USERS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_USERS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10
    
    # database_products:
    #     build:
    #         dockerfile: ./ecommerce/database_products/Dockerfile
    #     restart: always
    #     ports:
    #         - '5434:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_products:/var/lib/database_products/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_PRODUCTS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_PRODUCTS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_PRODUCTS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10
    
    # database_marketing:
    #     build:
    #         dockerfile: ./ecommerce/database_marketing/Dockerfile
    #     restart: always
    #     ports:
    #         - '5435:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_marketing:/var/lib/database_marketing/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_MARKETING_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_MARKETING_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_MARKETING_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10

    # database_orders:
    #     build:
    #         dockerfile: ./ecommerce/database_orders/Dockerfile
    #     restart: always
    #     ports:
    #         - '5436:${POSTGRES_PORT}'
    #     networks:
    #         - database_network
    #     env_file:
    #         - .env
    #     volumes:
    #         - ./data/database_orders:/var/lib/database_orders/data
    #     environment:
    #         POSTGRES_USER: ${DATABASE_ORDERS_POSTGRES_USER}
    #         POSTGRES_PASSWORD: ${DATABASE_ORDERS_POSTGRES_PASSWORD}
    #         POSTGRES_DB: ${DATABASE_ORDERS_POSTGRES_DATABASE_NAME}
    #     healthcheck:
    #         test: [“CMD-SHELL”, “pg_isready”]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 10

    
    # # Database administrator
    # pgadmin:
    #     image: dpage/pgadmin4
    #     environment:
    #         PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
    #         PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    #         PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    #         PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE}
    #     ports:
    #         - "5050:${PGADMIN_LISTEN_PORT}"
    #     volumes:
    #         - ./data/pgadmin4:/var/lib/pgadmin4/data
    #     networks:
    #         - database_network
    #     restart: unless-stopped

    
networks:
    database_network:
        driver: bridge

volumes:
    zookeeper:
    kafka1:
    database_analytics:
    database_marketing:
    database_orders:
    database_products:
    database_users:
    pgadmin:
