version: "3.8"
services:
    # zookeeper:
    #     image: zookeeper:3.4.9
    #     hostname: zookeeper
    #     ports:
    #     - "2181:2181"
    #     environment:
    #         ZOO_MY_ID: 1
    #         ZOO_PORT: 2181
    #         ZOO_SERVERS: server.1=zookeeper:2888:3888
    #     volumes:
    #         - ./data/zookeeper/data:/data
    #         - ./data/zookeeper/datalog:/datalog










        # healthcheck:
        #     test: ["CMD-SHELL", "echo ruok | nc -w 2 zookeeper 4444"]
        #     interval: 5s
        #     timeout: 10s
        #     retries: 3

    

    # kafka1:
    #     image: confluentinc/cp-kafka:5.3.0
    #     hostname: kafka1
    #     ports:
    #         - "9091:9091"
    #     environment:
    #         KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
    #         KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
    #         KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
    #         KAFKA_BROKER_ID: 1
    #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #     volumes:
    #         - ./data/kafka1/data:/var/lib/kafka/data
    #     depends_on:
    #         - zookeeper
    #     healthcheck:
    #         test: nc -z localhost 9091 || exit -1
    #         start_period: 15s
    #         interval: 5s
    #         timeout: 10s
    #         retries: 10

    # backend_analytics:
    #     restart: always
    #     build:
    #         dockerfile: ./ecommerce/backend_analytics/Dockerfile
    #     ports:
    #         - "8001:8001"
    #     env_file:
    #         - .env
        # depends_on:
        #     analytics_database:
        #         condition: service_healthy
            # kafka1:
                # condition: service_healthy
        
    
    # backend_api:
    #     restart: always
    #     build:
    #         dockerfile: ./ecommerce/backend_api/Dockerfile
    #     ports:
    #         - "8000:8000"
    #     command: "python3 manage.py runserver 0.0.0.0:8000"
    #     depends_on:
    #         kafka1:
    #             condition: service_healthy
    #     volumes:
    #         - ./ecommerce/backend_api:/api

    # Databases
    analytics_database:
        build:
            dockerfile: ./ecommerce/analytics_database/Dockerfile
        restart: always
        ports:
            - '5432:5432'
        networks:
            - turreta_network
        env_file:
            - .env
        volumes:
            - ./data/analytics_database:/var/lib/analytics_database/data
        environment:
            POSTGRES_USER: ${ANALYTICS_DATABASE_POSTGRES_USER}
            POSTGRES_PASSWORD: ${ANALYTICS_DATABASE_POSTGRES_PASSWORD}
            POSTGRES_DB: ${ANALYTICS_DATABASE_POSTGRES_DATABASE_NAME}
        healthcheck:
            test: [“CMD-SHELL”, “pg_isready”]
            interval: 1s
            timeout: 5s
            retries: 10
    
    users_database:
        build:
            dockerfile: ./ecommerce/users_database/Dockerfile
        restart: always
        ports:
            - '5433:5432'
        networks:
            - turreta_network
        env_file:
            - .env
        volumes:
            - ./data/users_database:/var/lib/users_database/data
        environment:
            POSTGRES_USER: ${USERS_DATABASE_POSTGRES_USER}
            POSTGRES_PASSWORD: ${USERS_DATABASE_POSTGRES_PASSWORD}
            POSTGRES_DB: ${USERS_DATABASE_POSTGRES_DATABASE_NAME}
        healthcheck:
            test: [“CMD-SHELL”, “pg_isready”]
            interval: 1s
            timeout: 5s
            retries: 10
    
    products_database:
        build:
            dockerfile: ./ecommerce/products_database/Dockerfile
        restart: always
        ports:
            - '5434:5432'
        networks:
            - turreta_network
        env_file:
            - .env
        volumes:
            - ./data/products_database:/var/lib/products_database/data
        environment:
            POSTGRES_USER: ${PRODUCTS_DATABASE_POSTGRES_USER}
            POSTGRES_PASSWORD: ${PRODUCTS_DATABASE_POSTGRES_PASSWORD}
            POSTGRES_DB: ${PRODUCTS_DATABASE_POSTGRES_DATABASE_NAME}
        healthcheck:
            test: [“CMD-SHELL”, “pg_isready”]
            interval: 1s
            timeout: 5s
            retries: 10
    
    marketing_database:
        build:
            dockerfile: ./ecommerce/marketing_database/Dockerfile
        restart: always
        ports:
            - '5434:5432'
        networks:
            - turreta_network
        env_file:
            - .env
        volumes:
            - ./data/marketing_database:/var/lib/marketing_database/data
        environment:
            POSTGRES_USER: ${MARKETING_DATABASE_POSTGRES_USER}
            POSTGRES_PASSWORD: ${MARKETING_DATABASE_POSTGRES_PASSWORD}
            POSTGRES_DB: ${MARKETING_DATABASE_POSTGRES_DATABASE_NAME}
        healthcheck:
            test: [“CMD-SHELL”, “pg_isready”]
            interval: 1s
            timeout: 5s
            retries: 10

    orders_database:
        build:
            dockerfile: ./ecommerce/orders_database/Dockerfile
        restart: always
        ports:
            - '5435:5432'
        networks:
            - turreta_network
        env_file:
            - .env
        volumes:
            - ./data/orders_database:/var/lib/orders_database/data
        environment:
            POSTGRES_USER: ${MARKETING_DATABASE_POSTGRES_USER}
            POSTGRES_PASSWORD: ${MARKETING_DATABASE_POSTGRES_PASSWORD}
            POSTGRES_DB: ${MARKETING_DATABASE_POSTGRES_DATABASE_NAME}
        healthcheck:
            test: [“CMD-SHELL”, “pg_isready”]
            interval: 1s
            timeout: 5s
            retries: 10

            
    pgadmin:
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
            PGADMIN_DEFAULT_PASSWORD: admin
            PGADMIN_LISTEN_PORT: 80
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        ports:
            - "5050:80"
        volumes:
            - ./data/pgadmin4:/var/lib/pgadmin4/data
        depends_on:
            - analytics_database
        networks:
            - turreta_network
        restart: unless-stopped

    
networks:
  turreta_network:
    driver: bridge

volumes:
    analytics_database:
    marketing_database:
    orders_database:
    products_database:
    users_database:
    pgadmin:
